{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from \"@angular/forms\";\nexport let LoginComponent = class LoginComponent {\n  constructor(fb, router, userloginService, localStorageService) {\n    this.fb = fb;\n    this.router = router;\n    this.userloginService = userloginService;\n    this.localStorageService = localStorageService;\n    this.localStorageService.set('user', null);\n    this.username = this.fb.control('', [Validators.required]);\n    this.password = this.fb.control('', [Validators.required]);\n    this.form = this.fb.nonNullable.group({\n      username: this.username,\n      password: this.password\n    });\n    this.countError = 0;\n  }\n  ngOnInit() {\n    this.usernameInput = document.querySelector('input[name=\"username\"]');\n    this.passwordInput = document.querySelector('input[name=\"password\"]');\n    this.textError = document.querySelector('.login-error-paragraph');\n    this.clear();\n  }\n  loginError(mensagem) {\n    this.usernameInput.style.borderColor = 'red';\n    this.passwordInput.style.borderColor = 'red';\n    this.textError.textContent = mensagem;\n    alert(mensagem);\n    this.textError.style.display = 'block';\n  }\n  loginDisabled() {\n    this.time = 20;\n    let message = 'Login disabled for ' + this.time.toString() + ' seconds';\n    alert(message);\n    let timer = setInterval(() => {\n      if (this.time > 0) {\n        this.form.disable();\n        message = 'Login disabled for ' + this.time.toString() + ' seconds';\n        this.textError.textContent = message;\n        this.textError.style.display = 'block';\n        this.time--;\n      } else {\n        clearInterval(timer);\n        this.usernameInput.style.borderColor = this.passwordInput.style.borderColor = 'black';\n        this.textError.style.display = 'none';\n        this.form.enable();\n        this.clear();\n        alert('Login enabled');\n      }\n    }, 1000);\n    this.countError = 0;\n    this.router.navigateByUrl('/login', {\n      replaceUrl: true\n    }).then();\n  }\n  doLogin() {\n    if (this.form.invalid) {\n      this.loginError('Username or Password is empty');\n      this.countError++;\n      if (this.countError === 3) {\n        this.loginDisabled();\n      }\n      return false;\n    }\n    let result = false;\n    try {\n      this.userloginService.getUser(this.username.value).subscribe(u => {\n        this.user = u.data;\n      });\n    } catch (e) {\n      if (e instanceof Error) {\n        return false;\n      }\n    }\n    if (this.username.value === this.user.cpf || this.username.value === this.user.email) {\n      result = this.password.value === this.user.senha;\n    } else {\n      result = false;\n    }\n    if (result) {\n      this.localStorageService.set('user', this.user);\n      this.router.navigateByUrl('/home', {\n        replaceUrl: true\n      }).then();\n      return true;\n    } else {\n      this.localStorageService.set('user', null);\n      if (this.countError === 3) {\n        this.loginDisabled();\n      } else {\n        this.countError++;\n        this.loginError('Username or Password is incorrect');\n        alert('Login Failed');\n      }\n      return false;\n    }\n  }\n  clear() {\n    this.form.reset();\n  }\n  enterSubmit(event) {\n    if (event.key === 'Enter') {\n      this.doLogin();\n    }\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","Validators","LoginComponent","constructor","fb","router","userloginService","localStorageService","set","username","control","required","password","form","nonNullable","group","countError","ngOnInit","usernameInput","document","querySelector","passwordInput","textError","clear","loginError","mensagem","style","borderColor","textContent","alert","display","loginDisabled","time","message","toString","timer","setInterval","disable","clearInterval","enable","navigateByUrl","replaceUrl","then","doLogin","invalid","result","getUser","value","subscribe","u","user","data","e","Error","cpf","email","senha","reset","enterSubmit","event","key","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\plataforma-ideias\\src\\app\\components\\pages\\login\\login.component.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Router} from \"@angular/router\";\n//import {UserloginService} from \"../../../service/userlogin/userlogin.service\";\nimport {User} from \"../../../service/interfaces/user\";\nimport {LocalStorageService} from \"../../../service/local-storage.service\";\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  private user!: User;\n  usernameInput!: HTMLInputElement | null;\n  passwordInput!: HTMLInputElement | null;\n  textError!: HTMLParagraphElement | null;\n\n  username: FormControl<string | null>;\n  password: FormControl<string | null>;\n  form: FormGroup;\n\n  countError!: number;\n  time!: number;\n\n\n  constructor(private readonly fb: FormBuilder,\n              private router: Router,\n              private userloginService: UserloginService,\n              private localStorageService: LocalStorageService) {\n    this.localStorageService.set('user', null);\n    this.username = this.fb.control('', [Validators.required]);\n    this.password = this.fb.control('', [Validators.required]);\n    this.form = this.fb.nonNullable.group({\n      username: this.username,\n      password: this.password,\n    });\n    this.countError = 0;\n  }\n\n  ngOnInit() {\n    this.usernameInput = document.querySelector('input[name=\"username\"]');\n    this.passwordInput = document.querySelector('input[name=\"password\"]');\n    this.textError = document.querySelector('.login-error-paragraph');\n    this.clear();\n  }\n\n\n  loginError(mensagem: string) {\n    this.usernameInput!.style.borderColor = 'red';\n    this.passwordInput!.style.borderColor = 'red';\n    this.textError!.textContent = mensagem;\n    alert(mensagem);\n    this.textError!.style.display = 'block';\n  }\n\n  loginDisabled() {\n    this.time = 20\n    let message = 'Login disabled for ' + this.time.toString() + ' seconds'\n    alert(message);\n    let timer = setInterval(() => {\n      if (this.time > 0) {\n        this.form.disable();\n        message = 'Login disabled for ' + this.time.toString() + ' seconds';\n        this.textError!.textContent = message;\n        this.textError!.style.display = 'block';\n        this.time--;\n      } else {\n        clearInterval(timer);\n        this.usernameInput!.style.borderColor = this.passwordInput!.style.borderColor = 'black';\n        this.textError!.style.display = 'none';\n        this.form.enable();\n        this.clear();\n        alert('Login enabled');\n      }\n    }, 1000);\n    this.countError = 0;\n    this.router.navigateByUrl('/login', {replaceUrl: true}).then();\n\n  }\n\n  doLogin() {\n    if (this.form.invalid) {\n      this.loginError('Username or Password is empty');\n      this.countError++;\n      if (this.countError === 3) {\n        this.loginDisabled();\n      }\n      return false;\n    }\n    let result = false;\n    try {\n      this.userloginService.getUser(this.username.value).subscribe(u => {\n        this.user = u.data;\n      });\n    } catch (e) {\n      if (e instanceof Error) {\n        return false;\n      }\n    }\n    if ((this.username.value === this.user.cpf) || (this.username.value === this.user.email)) {\n      result = this.password.value === this.user.senha;\n    } else {\n      result = false;\n    }\n    if (result) {\n      this.localStorageService.set('user', this.user);\n      this.router.navigateByUrl('/home', {replaceUrl: true}).then();\n      return true;\n    } else {\n      this.localStorageService.set('user', null);\n      if (this.countError === 3) {\n        this.loginDisabled();\n      } else {\n        this.countError++;\n        this.loginError('Username or Password is incorrect');\n        alert('Login Failed');\n      }\n\n      return false;\n    }\n  }\n\n  clear() {\n    this.form.reset();\n  }\n\n  enterSubmit(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.doLogin();\n    }\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}